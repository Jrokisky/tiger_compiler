structure A = Absyn

datatype lvalPart = Field of Symbol.symbol
                  | Subscript of A.exp

fun buildLVal (lval, pos, h::t) =
    (case h of
        Field s     => buildLVal ((A.FieldVar (lval, s, pos)), pos, t)
      | Subscript e => buildLVal ((A.SubscriptVar (lval, e, pos)), pos, t))
  | buildLVal (lval, _, nil)    = lval

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE | UMINUS
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm exp of A.exp
       | program of A.exp
       | sequence of A.exp 
       | sequenceExp of (A.exp * pos) list
       | exp_star_semi of (A.exp * pos) list 
       | exp_star_comma of A.exp list
       | exp_star_comma_tail of A.exp list
       | record_fields of (A.symbol * A.exp * pos) list
       | record_fields_mult of (A.symbol * A.exp * pos) list
       | decs of A.dec list
       | dec of A.dec
       | tydec of {name:A.symbol, ty:A.ty, pos:pos} 
       | tydecs of {name:A.symbol, ty:A.ty, pos:pos} list 
       | vardec of A.dec
       | fundec of A.fundec
       | fundecs of A.fundec list
       | ty of A.ty
       | tyfields of A.field list
       | tyfield_list of A.field list
       | lvalue of A.var
       | lvalue' of lvalPart list
       | arith_ops of A.exp
       | comp_ops of A.exp
       | bool_ops of A.exp

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

program	: exp                         (exp)
	
exp : LET decs IN sequenceExp END     (A.LetExp {decs=decs, body=(A.SeqExp sequenceExp), pos=LETleft}) 
    | sequence                        (sequence)
   | LPAREN RPAREN                    (A.NilExp)
   | NIL                              (A.NilExp)
   | STRING                           (A.StringExp(STRING, STRINGleft))
   | IF exp THEN exp ELSE exp         (A.IfExp{test=exp1, then'=exp2, else'=(SOME exp3), pos=IFleft})
   | IF exp THEN exp                  (A.IfExp{test=exp1, then'=exp2, else'=NONE, pos=IFleft})
   | ID LBRACE record_fields RBRACE   (A.RecordExp {fields=record_fields, typ=(Symbol.symbol ID), pos=IDleft})
   | ID LBRACK exp RBRACK OF exp      (A.ArrayExp {typ=(Symbol.symbol ID), size=exp1, init=exp2, pos=IDleft})
   | ID LPAREN exp_star_comma RPAREN  (A.CallExp {func=(Symbol.symbol ID), args=exp_star_comma, pos=IDleft})
   | lvalue ASSIGN exp                (A.AssignExp {var=lvalue, exp=exp, pos=ASSIGNleft})
   | lvalue                           (A.VarExp lvalue)
   | WHILE exp DO exp                 (A.WhileExp {test=exp1, body=exp2, pos=WHILEleft})
   | FOR ID ASSIGN exp TO exp DO exp  (A.ForExp {var=(Symbol.symbol ID), escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})
   | BREAK                            (A.BreakExp(BREAKleft))
   | arith_ops                        (arith_ops)
   | comp_ops                         (comp_ops)
   | bool_ops                         (bool_ops)
   | INT                              (A.IntExp(INT))
   | MINUS exp %prec UMINUS           (A.OpExp {left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft})

arith_ops : exp PLUS exp   (A.OpExp {left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft})
          | exp TIMES exp  (A.OpExp {left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft})
          | exp DIVIDE exp (A.OpExp {left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft})
          | exp MINUS exp  (A.OpExp {left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft})

comp_ops : exp EQ exp      (A.OpExp {left=exp1, oper=A.EqOp, right=exp2, pos=EQleft})
         | exp NEQ exp     (A.OpExp {left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft})
         | exp LT exp      (A.OpExp {left=exp1, oper=A.LtOp, right=exp2, pos=LTleft})
         | exp LE exp      (A.OpExp {left=exp1, oper=A.LeOp, right=exp2, pos=LEleft})
         | exp GT exp      (A.OpExp {left=exp1, oper=A.GtOp, right=exp2, pos=GTleft})
         | exp GE exp      (A.OpExp {left=exp1, oper=A.GeOp, right=exp2, pos=GEleft})

bool_ops : exp AND exp      (A.IfExp{test=exp1, then'=exp2, else'=(SOME (A.IntExp(0))), pos=ANDleft})
         | exp OR exp       (A.IfExp{test=exp1, then'=(A.IntExp(1)), else'=(SOME exp2), pos=ORleft})

lvalue  : ID lvalue'                (buildLVal ((A.SimpleVar ((Symbol.symbol ID), IDleft)), IDleft, lvalue'))

lvalue' : DOT ID lvalue'            ((Field(Symbol.symbol ID))::lvalue')
        | LBRACK exp RBRACK lvalue' (Subscript(exp)::lvalue')
        |                           (nil)
        
sequence : LPAREN sequenceExp RPAREN  (A.SeqExp sequenceExp)

sequenceExp : exp exp_star_semi  ((exp1, exp1left) :: exp_star_semi)

exp_star_semi : SEMICOLON exp exp_star_semi ((exp1, exp1left) :: exp_star_semi)
              |                ([])

exp_star_comma : exp exp_star_comma_tail  (exp :: exp_star_comma_tail)
               |                          (nil)

exp_star_comma_tail : COMMA exp exp_star_comma_tail  (exp :: exp_star_comma_tail)
                    |               (nil)

record_fields : ID EQ exp record_fields_mult    ((Symbol.symbol ID, exp, EQleft) :: record_fields_mult)
              |                                 (nil)

record_fields_mult : COMMA ID EQ exp record_fields_mult ((Symbol.symbol ID, exp, EQleft) :: record_fields_mult)
                   |                 (nil)

decs : dec decs              (dec :: decs)
     |                       ([])

dec : tydecs                 (A.TypeDec tydecs)
    | vardec                 (vardec)
    | fundecs                (A.FunctionDec fundecs)

tydecs : tydec               ([tydec])
       | tydecs tydec        (tydecs @ [tydec])

tydec : TYPE ID EQ ty        ({name=(Symbol.symbol ID), ty=ty, pos=TYPEleft})

ty : ID                      (A.NameTy(Symbol.symbol ID, IDleft))
   | LBRACE tyfields RBRACE  (A.RecordTy tyfields)
   | ARRAY OF ID             (A.ArrayTy (Symbol.symbol ID, ARRAYleft))

tyfields : ID COLON ID tyfield_list (({name=(Symbol.symbol ID1), escape=ref true, typ=(Symbol.symbol ID2), pos=ID1left}:A.field) :: tyfield_list)
         |                          (nil)

tyfield_list : COMMA ID COLON ID tyfield_list (({name=(Symbol.symbol ID1), escape=ref true, typ=(Symbol.symbol ID2), pos=ID1left}:A.field) :: tyfield_list)
             |                                (nil)

vardec : VAR ID ASSIGN exp            (A.VarDec {name=(Symbol.symbol ID), escape=ref true, typ=NONE, init=exp, pos=VARleft})
       | VAR ID COLON ID ASSIGN exp   (A.VarDec {name=(Symbol.symbol ID1), escape=ref true, typ=(SOME (Symbol.symbol ID2, ID2left)), init=exp, pos=VARleft})

fundecs : fundec            ([fundec])
        | fundecs fundec    (fundecs @ [fundec])

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp          ({name=(Symbol.symbol ID), params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft}:A.fundec)
       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ({name=(Symbol.symbol ID), params=tyfields, result=SOME ((Symbol.symbol ID2), ID2left), body=exp, pos=FUNCTIONleft}:A.fundec)
